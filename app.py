import pandas as pd
import numpy as np
from prophet import Prophet
import streamlit as st
import matplotlib.pyplot as plt

# Configuration Streamlit
st.set_page_config(page_title="Pr√©vision du prix du bl√©", layout="wide")

st.title("üåæ Pr√©vision du Prix du Bl√© avec Prophet")
st.markdown("""
Bienvenue sur cette application de pr√©vision du **prix du bl√©** üìâ bas√©e sur le mod√®le Prophet de Meta AI.
Nous utilisons les donn√©es historiques du prix du bl√©, le **taux de change EUR/USD** et la **production mondiale annuelle de bl√©** comme variables explicatives.

Vous pouvez ici :
- Visualiser l'√©volution historique du prix du bl√©
- Pr√©dire les prix pour les mois √† venir
- Explorer les tendances sous-jacentes
""")

# 1. Chargement des donn√©es directement depuis GitHub
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/<TON-UTILISATEUR>/<TON-DEPOT>/main/Donn√©_F_Prophet.xlsx"
    return pd.read_excel(url)

try:
    df = load_data()
except:
    st.error("‚ùå Erreur de chargement du fichier. V√©rifie que le fichier Excel est bien dans ton repo GitHub.")
    st.stop()

# 2. Pr√©paration des donn√©es
df["Date"] = pd.to_datetime(df["Date"])
df["prix_ble_lisse"] = df["prix_ble"].rolling(window=3, center=True).mean()
df = df.dropna(subset=["prix_ble_lisse", "taux_ED", "prod_monde"])

# 3. Format pour Prophet
df_model = pd.DataFrame({
    "ds": df["Date"],
    "y": df["prix_ble_lisse"],
    "taux_ED": df["taux_ED"],
    "prod_monde": df["prod_monde"]
})

# 4. Choix du nombre de mois √† pr√©dire
periods = st.slider("üîÆ Nombre de mois √† pr√©dire :", min_value=6, max_value=36, value=12, step=6)

# 5. Initialisation du mod√®le
model = Prophet(
    changepoint_prior_scale=0.05,
    seasonality_prior_scale=0.1,
    yearly_seasonality=True,
    weekly_seasonality=False,
    daily_seasonality=False
)
model.add_regressor("taux_ED")
model.add_regressor("prod_monde")
model.fit(df_model)

# 6. Cr√©ation des dates futures
future = model.make_future_dataframe(periods=periods, freq="M")
future["taux_ED"] = df_model["taux_ED"].iloc[-1]
future["prod_monde"] = df_model["prod_monde"].iloc[-1]

# 7. Pr√©diction
forecast = model.predict(future)

# 8. Affichage du graphique de pr√©vision
st.subheader("üìà √âvolution pr√©vue du prix du bl√©")
fig1 = model.plot(forecast)
st.pyplot(fig1)

# 9. Composantes de la pr√©vision
st.subheader("üîç Composantes de la pr√©vision")
fig2 = model.plot_components(forecast)
st.pyplot(fig2)

# 10. Tableau des pr√©dictions
st.subheader("üìã Tableau des pr√©visions")
forecast_display = forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(periods)
forecast_display.columns = ["Date", "Pr√©vision", "Borne basse", "Borne haute"]
forecast_display["Date"] = forecast_display["Date"].dt.strftime("%Y-%m")
st.dataframe(forecast_display.reset_index(drop=True), use_container_width=True)

# 11. Footer
st.markdown("---")
st.markdown("**üß† Mod√®le utilis√© :** Prophet de Meta | **Donn√©es :** prix du bl√©, taux de change, production mondiale | **Auteur :** Ton Nom / Projet √âtudiant / 2025")
